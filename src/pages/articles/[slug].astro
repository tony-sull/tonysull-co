---
import site from "../../data/site.json"
import Show from "../../components/Show.astro"
import Layout from "../../layouts/Base.astro"
import { isoDate, shortDate } from "../../utils/dates"
import { getDomain } from "../../utils/links"

export async function getStaticPaths({ rss }) {
  const data = await Astro.glob<CMS.Article>('../../data/articles/*.md')
    .then(matches => matches.filter(match => !match.frontmatter.draft));

  const allArticles = data.map(({ file, url, frontmatter: article, Content }) => {
    return {
      params: { slug: article.slug },
      props: {
        article: { ...article, minutes: 0 },
        Content
      },
    }
  })

  rss({
    title: `Articles • ${site.title}`,
    description: site.description,
    customData: `<language>en-us</language><author><name>${
      site.title
    }</name></author><id>${site.url}${site.rss.articles}</id><updated>${isoDate(
      new Date()
    )}</updated>`,
    items: allArticles.map(({ props }) => {
      const { article } = props

      return {
        title: article.title,
        link: `/articles/${article.slug}/`,
        pubDate: isoDate(article.published_date),
        customData: `<id>${article.slug}</id><updated>${isoDate(
          article.modified_date || article.published_date
        )}</updated>`,
      }
    }),
    dest: `/${site.rss.articles}`,
  })

  return allArticles
}

interface Props {
  article: CMS.Article
}

const { article, Content } = Astro.props

const {
  title,
  description,
  category,
  image,
  canonical_url,
  published_date,
  modified_date,
  minutes,
} = article

const publishedDateISO = published_date && isoDate(published_date)
const publishedDate = published_date && shortDate(published_date)
const modifiedDateISO = modified_date && isoDate(modified_date)
const modifiedDate = modified_date && shortDate(modified_date)
const canonicalDomain = canonical_url && getDomain(canonical_url)
---

<Layout
  prose
  {title}
  {description}
  {image}
  pathname={Astro.canonicalURL.pathname}
  canonicalURL={canonical_url || Astro.canonicalURL}
>
  <section class="h-entry">
    <header>
      <em>{category}</em>
      <h1 class="p-name">{title}</h1>

      <small>
        <time class="dt-published" datetime={publishedDateISO}
          >{publishedDate}</time
        >
        <Show when={!!canonical_url}>
          <i>
            • Originally published at{" "}
            <a href={canonical_url}>{canonicalDomain}</a>
          </i>
        </Show>
        <b class="h-card p-author">
          <a class="u-url" href="/">{title}</a>
        </b>
        • {minutes} min read
      </small>

      <Show when={modifiedDate}>
        <small>
          <time class="dt-updated" datetime={modifiedDateISO}>
            <i>Updated: {modifiedDate}</i>
          </time>
        </small>
      </Show>

      <blockquote class="h5">
        <p class="p-summary lead">{description}</p>
      </blockquote>
    </header>
  </section>

  <article class="e-content markdown">
    <Content />
  </article>
</Layout>

<style lang="scss">
  header {
    margin-bottom: var(--spacer-md);

    & em {
      font-style: normal;
      text-transform: uppercase;
      color: var(--chisel-secondary);
      font-weight: 700;
      margin-bottom: var(--spacer-sm);
      display: block;
    }

    & small {
      display: block;
      margin-top: var(--spacer-tiny);
    }

    & .p-author {
      display: none;
    }

    & h1 {
      margin: 0 0 0.5em;
      font-size: var(--chisel-h2);

      @media (min-width: 640px) {
        & {
          font-size: var(--chisel-h2);
        }
      }
    }

    & blockquote {
      color: var(--chisel-neutral-700);
      font-weight: 400;
      line-height: 1.3;
      margin: var(--spacer-md) 0 0;
    }
  }

  article {
    & :global(h2) {
      font-size: var(--chisel-h3);
    }

    & :global(h3) {
      font-size: var(--chisel-h4);
    }

    & :global(h4) {
      font-size: var(--chisel-h5);
    }
  }
</style>
