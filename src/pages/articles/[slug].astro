---
import site from '../../data/site.json'
import Layout from '../../layouts/Base.astro'
import { isoDate, shortDate } from '../../utils/dates'
import { getDomain } from '../../utils/links'
import { readMinutes } from '../../utils/readMinutes'

export async function getStaticPaths() {
  const data = Astro.fetchContent('../../data/articles/*.md')
    .filter(({ draft }) => !draft)

  return data.map(({ astro, file, url, ...article }) => {
    return {
      params: { slug: article.slug },
      props: { article: { ...article, minutes: readMinutes(astro.source) }, content: astro.html }
    }
  })
}

const { slug } = Astro.request.params
const { article, content } = Astro.props

const { title, description, image, canonical_url, published_date, modified_date, minutes } = article

const publishedDateISO = published_date && isoDate(published_date)
const publishedDate = published_date && shortDate(published_date)
const modifiedDateISO = modified_date && isoDate(modified_date)
const modifiedDate = modified_date && shortDate(modified_date)
const canonicalDomain = canonical_url && getDomain(canonical_url)
---

<Layout
  prose
  title={title}
  description={description}
  image={image}
  pathname={Astro.request.url.pathname}
  canonicalURL={canonical_url || Astro.request.canonicalURL}
>
  <section class="h-entry">
    <header>
      <h1 class="p-name">{title}</h1>

      <p class="p-summary h5 lead">{description}</p>

      <small>
        <time class="dt-published" datetime={publishedDateISO}>{publishedDate}</time>
        {canonical_url && (
          <i>• Originally published at <a href={canonical_url}>{canonicalDomain}</a></i>
        )}
        <b class="h-card p-author">
          <a class="u-url" href="/">{title}</a>
        </b>
        • {minutes} min read
      </small>

      {modifiedDate &&
        <small>
            <time class="dt-updated" datetime={modifiedDateISO}>
                <i>Updated: {modifiedDate}</i>
            </time>
        </small>
      }
    </header>
  </section>
  
  <article class="e-content">
    {content}
  </article>
</Layout>

<style lang="scss">
  header {
    margin-bottom: var(--spacer-lg);

    & small {
      display: block;
      margin-top: var(--spacer-tiny);
    }

    & .p-author {
      display: none;
    }

    & h1 {
      margin: 0 0 0.5em;
      font-size: var(--chisel-h3);

      @media (min-width: 640px) {
        & {
          font-size: var(--chisel-h2);
        }
      }
    }

    & .lead {
      color: var(--chisel-neutral-700);
    }
  }
</style>

<style lang="scss" global>
  article {
    & h1, h2, h3, h4 {
      margin: 1.5em 0 0.5em;
    }

    & p {
      line-height: 1.7;
    }

    & pre + p {
      margin-top: var(--spacer-sm);
    }

    & .twitter-tweet + p {
      margin-top: 1em;
    }
  }
</style>